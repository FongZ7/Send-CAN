
#include <Arduino.h>
#include <HardwareSerial.h>
#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_can.h"  // Ensure this is included
#include "STM32_CAN.h"

#define JOYSTICK_CAN_ID 0xCFDD633     // ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#define SW_JOYSTICK_CAN_ID 0x123      // ID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
#define INDICATOR_CAN_ID 0x121 
#define REMOTE_CAN_ID 0x180


#define LED_Status_Can_Remote PA2
#define LED_Status_Can_Joystick PA3
#define LED_Status_Can_Indicator PA4
#define LED_Status_Can_Error PB12

// ‡∏û‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
#define MOTOR1_PWM_PIN PB1              // ‡∏û‡∏¥‡∏ô PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1 (‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
#define MOTOR1_DIR_PIN PA15             // ‡∏û‡∏¥‡∏ô DIR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1

#define MOTOR2_PWM_PIN PB0              // ‡∏û‡∏¥‡∏ô PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 (‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á)
#define MOTOR2_DIR_PIN PB3              // ‡∏û‡∏¥‡∏ô DIR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2

#define MOTOR3_PWM_PIN PA7              // ‡∏û‡∏¥‡∏ô PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3
#define MOTOR3_DIR_PIN PB4              // ‡∏û‡∏¥‡∏ô DIR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3

#define MOTOR4_PWM_PIN PA6              // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß
#define MOTOR4_DIR_PIN PB5              // ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏≤‡∏•‡πå‡∏ß

#define MAX_INDEX_A 160  // ‡∏Ñ‡πà‡∏≤ index ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
#define MAX_INDEX_B 120  // ‡∏Ñ‡πà‡∏≤ index ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á

uint8_t indexA = 0;  // index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (0-32)
uint8_t indexB = 0;  // index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á (0-24)

std::vector<String> joystickSequence;   // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
bool enableJoystick = true;  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏¢‡∏™‡∏ï‡∏¥‡πä‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
bool enableRemote = false;   // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
bool recording = false;                 // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å?
bool replaying = false;                 // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥?
bool lastButtonState = false;           // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
bool valveState = false;                // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ß‡∏≤‡∏•‡πå‡∏ß (‡πÄ‡∏õ‡∏¥‡∏î / ‡∏õ‡∏¥‡∏î)
bool motorActive = false;               // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
bool motorActive2 = false;              // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
bool Status_CAN_INDICATOR = false;
bool Status_CAN_JOYSTICK = false;
bool deployed = false;  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
bool stowed = true;    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
bool deployjoystick = false;  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
bool stowjoystick = true;    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó


int replayIndex = 0;                    // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
int status_stop = 0;                    // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
unsigned long lastReplayTime = 0;       // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô
unsigned long replayStartTime = 0;      // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
unsigned long firstRecordedTime = 0;    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
unsigned long valveMotorStartTime = 0;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏ô‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏≤‡∏•‡πå‡∏ßs
unsigned long previousTime = 0;         // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
unsigned long previousTime2 = 0;        // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

const unsigned long motorRunTime = 1000;  // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏°‡∏∏‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
unsigned long lastMovementTime = 0;     // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const unsigned long idleTime = 125;      // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
unsigned long A = 0;
unsigned long B = 0;

static uint8_t previous_spare1 = 0;// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á spare1
static bool remoteMode = false;// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó

uint8_t msb;         //‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤
uint8_t byte2;       //‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
uint8_t byte3;       //‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á
uint8_t byte4;       //‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
uint8_t byte6;       //stream/fog
uint8_t byte7;       //‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß

HardwareSerial mySerial(USART1);
STM32_CAN Can( CAN1, DEF );  //Use PA11/12 pins for CAN1.

static CAN_message_t CAN_RX_msg;
static CAN_message_t CAN_TX_msg;


void updateCANIndicator() {
  CAN_TX_msg.id = 0x069;
  CAN_TX_msg.len = 8;
  CAN_TX_msg.buf[0] = floor(indexA/5);  // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á indexA (0-32)
  CAN_TX_msg.buf[1] = floor(indexB/5);  // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á indexB (0-24)
  Can.write(CAN_TX_msg);
  bool send = Can.write(CAN_TX_msg);
  mySerial.println(send);
}

void stopMotors() {
  analogWrite(MOTOR1_PWM_PIN, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
  analogWrite(MOTOR2_PWM_PIN, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
  digitalWrite(MOTOR1_DIR_PIN, LOW); // ‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1 ‡πÄ‡∏õ‡πá‡∏ô LOW
  digitalWrite(MOTOR2_DIR_PIN, LOW); // ‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 ‡πÄ‡∏õ‡πá‡∏ô LOW
 
  mySerial.println("Motors stopped.");
}
void setup()
{
  mySerial.begin(115200);
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ LED
  pinMode(LED_Status_Can_Remote, OUTPUT);
  pinMode(LED_Status_Can_Indicator, OUTPUT);
  pinMode(LED_Status_Can_Joystick, OUTPUT);
  pinMode(LED_Status_Can_Error, OUTPUT);
 
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ PWM ‡πÄ‡∏õ‡πá‡∏ô Output
  pinMode(MOTOR1_PWM_PIN, OUTPUT);
  pinMode(MOTOR2_PWM_PIN, OUTPUT);
  pinMode(MOTOR3_PWM_PIN, OUTPUT);
  pinMode(MOTOR4_PWM_PIN, OUTPUT);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ Direction ‡πÄ‡∏õ‡πá‡∏ô Output
  pinMode(MOTOR1_DIR_PIN, OUTPUT);
  pinMode(MOTOR2_DIR_PIN, OUTPUT);
  pinMode(MOTOR3_DIR_PIN, OUTPUT);
  pinMode(MOTOR4_DIR_PIN, OUTPUT);


  Can.begin();
  Can.setBaudRate(250000);  //250KBPS
  // Can.setBaudRate(500000);  //500KBPS
  //Can.setBaudRate(1000000);  //1000KBPS

  // OFF LED
  digitalWrite(LED_Status_Can_Error, HIGH);
  digitalWrite(LED_Status_Can_Indicator, HIGH);
  digitalWrite(LED_Status_Can_Joystick, HIGH);
  digitalWrite(LED_Status_Can_Remote, HIGH);
}



void processValveMotor(bool buttonPressed) {
  unsigned long currentTime = millis();

  if (buttonPressed) {
    if (!motorActive) {
      mySerial.println("üîÑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß");
      A = millis();
      analogWrite(MOTOR4_PWM_PIN, 200);  
      digitalWrite(MOTOR4_DIR_PIN, HIGH); 
      valveMotorStartTime = currentTime;
      motorActive = true;
      valveState = true;
    } 
  } else {
    if (motorActive) {
      mySerial.println("‚Ü© ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß");
      B = millis();
      analogWrite(MOTOR4_PWM_PIN, 200);  
      digitalWrite(MOTOR4_DIR_PIN, LOW);

      valveMotorStartTime = currentTime;
      valveState = false;
      motorActive = false;
      motorActive2 = true;
    }
  }

  if (motorActive && (currentTime - valveMotorStartTime >= motorRunTime)) {
    analogWrite(MOTOR4_PWM_PIN, 0);  
    mySerial.println("‚èπ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏≤‡∏•‡πå‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    B = millis();
    
  }
  if (motorActive2 && ((currentTime - valveMotorStartTime >= motorRunTime ) || (currentTime - B >=  B-A)) ) {
    analogWrite(MOTOR4_PWM_PIN, 0);
    mySerial.println("‚èπ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏≤‡∏•‡πå‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    motorActive2 = false;
  }
}

void processJoystick(uint8_t msb, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte6, uint8_t byte7) {

  String horizontal = "";
  String vertical = "";
  String special1 = "";

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
  if (msb == 4 || msb == 132) horizontal = "L(" + String(byte2) + ")";           // ‡∏ã‡πâ‡∏≤‡∏¢
  else if (msb == 16 || msb == 144) horizontal = "R(" + String(byte2) + ")";  // ‡∏Ç‡∏ß‡∏≤

  if (byte3 == 16 || byte3 == 144) vertical = "U(" + String(byte4) + ")";   // ‡∏Ç‡∏∂‡πâ‡∏ô
  else if (byte3 == 4 || byte3 == 132) vertical = "D(" + String(byte4) + ")";  // ‡∏•‡∏á

  if (byte6 == 16) special1 = "üîµ";          // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
  else if (byte6 == 64) special1 = "üü£";  // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á



  String movement = horizontal + vertical + special1;

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞ PWM
  if (recording) {
    unsigned long currentTime = millis();
    if (currentTime - previousTime >= 50) {
      previousTime = currentTime;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      String pwmData = String(byte2) + "," + String(byte4);
      joystickSequence.push_back(String(currentTime) + "|" + movement + " PWM: " + pwmData);

    }
  }


  if (recording && movement.length() > 0) {
    mySerial.print("Recording: ");
    mySerial.println(movement);
  }

  // ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞ PWM ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  if (!recording && !replaying && movement.length() > 0) {
    mySerial.print("Joystick Movement: ");
    mySerial.println(movement);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞ PWM
  if (movement.length() > 0) {
      lastMovementTime = millis();  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  }


  if (byte6 == 16) {  // üîµ ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    mySerial.println("Motor 3 Direction: Left");
    digitalWrite(MOTOR3_DIR_PIN, LOW);
    analogWrite(MOTOR3_PWM_PIN, 200);  

  } else if (byte6 == 64) {  // üü£ ‡∏õ‡∏∏‡πà‡∏°‡∏°‡πà‡∏ß‡∏á ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤
    mySerial.println("Motor 3 Direction: Right");
    digitalWrite(MOTOR3_DIR_PIN, HIGH);
    analogWrite(MOTOR3_PWM_PIN, 200);  

  } else {  // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏° ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3
    analogWrite(MOTOR3_PWM_PIN, 0); 

  }


  // ‡∏™‡∏±‡πà‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏à‡∏≠‡∏¢‡∏™‡∏ï‡∏¥‡πä‡∏Å
  if (!replaying) {
    if (byte2 > 0) {
      if (msb == 4 || msb == 132) {  // ‡∏ã‡πâ‡∏≤‡∏¢
        mySerial.println("Motor 1 Direction: Left");
        digitalWrite(MOTOR1_DIR_PIN, LOW);
        analogWrite(MOTOR1_PWM_PIN, byte2);  
        status_stop = 0;

        if (indexA > 0) indexA--;  // ‡∏•‡∏î index (0-32)
        updateCANIndicator();

      } else if (msb == 16 || msb == 144) {  // ‡∏Ç‡∏ß‡∏≤
        mySerial.println("Motor 1 Direction: Right");
        digitalWrite(MOTOR1_DIR_PIN, HIGH);
        analogWrite(MOTOR1_PWM_PIN, byte2);  
        status_stop = 0;

        if (indexA < MAX_INDEX_A) indexA++;  // ‡πÄ‡∏û‡∏¥‡πà‡∏° index (0-32)
        updateCANIndicator();
      }
    } 




    if (byte4 > 0) {
      if (byte3 == 16 || byte3 == 144) {  // ‡∏Ç‡∏∂‡πâ‡∏ô
        mySerial.println("Motor 2 Direction: Up");
        digitalWrite(MOTOR2_DIR_PIN, HIGH);
        analogWrite(MOTOR2_PWM_PIN, byte4);  

        if (indexB < MAX_INDEX_B) indexB++;  // ‡πÄ‡∏û‡∏¥‡πà‡∏° index (0-24)
        updateCANIndicator();

        status_stop = 0;
      } else if (byte3 == 4 || byte3 == 132) {  // ‡∏•‡∏á
        mySerial.println("Motor 2 Direction: Down");
        digitalWrite(MOTOR2_DIR_PIN, LOW);
        analogWrite(MOTOR2_PWM_PIN, byte4);  

        if (indexB > 0) indexB--;  // ‡∏•‡∏î index (0-24)
        updateCANIndicator();

        status_stop = 0;
      }
    } 
  }
}


void Deploy() {
    if (!deployed && stowed) {
      deployed = true;
      stowed = false;
      mySerial.println("Deploying...");
    } 
}

void Stow() {
    if (!stowed && deployed) {
      stowed = true;
      deployed = false;
      mySerial.println("Stowing...");
    } 
  }


void loop()
{


  //////////////////joystick///////////////////////////////////////
  if (Can.read(CAN_RX_msg)) {
    

     ///////////////////////////Teach//////////////////////////////////
    if (CAN_RX_msg.id == REMOTE_CAN_ID) {                  // CAN Recevier REMOTE
      unsigned long currentTime2 = millis();
      if (currentTime2 - previousTime2 >= 50) {
        previousTime2 = currentTime2;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        digitalToggle(LED_Status_Can_Remote);

      }
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å message
      uint8_t status = CAN_RX_msg.buf[1];
      uint8_t lever1_updown = CAN_RX_msg.buf[3];
      uint8_t lever1_leftright = CAN_RX_msg.buf[4];
      uint8_t lever2_updown = CAN_RX_msg.buf[5];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      uint8_t msb1 = 0;
      if (lever1_leftright < 128) msb1 = 4;
      else if (lever1_leftright > 128) msb1 = 16;
      else msb1 = 0;

      uint8_t byte22 = 0;
      if (lever1_leftright < 128) {
        byte22 = map(lever1_leftright, 0, 128, 255, 0);
      }

      if (lever1_leftright > 128) {
        byte22 = map(lever1_leftright, 128, 255, 0, 255);
      }

      uint8_t byte33 = 0;
      if (lever1_updown > 128) byte33 = 16;
      else if (lever1_updown < 128) byte33 = 4;
      else byte33 = 0;

      uint8_t byte44 = 0;
      if (lever1_updown < 128) {
        byte44 = map(lever1_updown, 0, 128, 255, 0);
      }

      if (lever1_updown > 128) {
        byte44 = map(lever1_updown , 128, 255, 0, 255);
      }

      uint8_t byte66 = 0;
      if (lever2_updown > 128) byte66 = 16;
      else if (lever2_updown < 128) byte66 = 64;
      else byte66= 0;

      uint8_t byte77 = (status & 4) ? 1 : 0; // On/Off button

      // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 0/1
      uint8_t spare1 = (status & 2) ? 1 : 0;
      uint8_t deploy_stow = (status & 8) ? 1 : 0;
      uint8_t spare2 = (status & 16) ? 1 : 0;
      uint8_t spare3 = (status & 32) ? 1 : 0;
      uint8_t teach = (status & 64) ? 1 : 0;

      // mySerial.println(deploy_stow);

      if (spare1 == 1 && previous_spare1 == 0) {
        // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        remoteMode = !remoteMode;
        mySerial.println("Remote Mode: ");
        
        if (remoteMode) {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏µ‡πÇ‡∏°‡∏ó
            mySerial.println("ON");
            enableRemote = true;
            enableJoystick = false;
            // ‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏µ‡πÇ‡∏°‡∏ó...
        } else {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≠‡∏¢‡∏™‡∏ï‡∏¥‡πä‡∏Å
            mySerial.println("OFF");
            enableRemote = false;
            enableJoystick = true;
            // ‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≠‡∏¢‡∏™‡∏ï‡∏¥‡πä‡∏Å...
        }
    }
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ spare1 ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        previous_spare1 = spare1;

      if (enableRemote) {
        // mySerial.println("Remote Mode: ON");
        if (deploy_stow == 1) {
          Deploy();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Deploy
          processValveMotor(byte77 == 1);
          processJoystick(msb1, byte22, byte33, byte44, byte66, byte77);
          
        } else {
          Stow();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Stow
        }

      }
      // mySerial.println();
      // mySerial.print("  MSB    "); mySerial.print(msb);
      // mySerial.print("  Byte2  "); mySerial.print(byte2);
      // mySerial.print("  Byte3  "); mySerial.print(byte3);
      // mySerial.print("  Byte4  "); mySerial.print(byte4);
      // mySerial.print("  Byte6  "); mySerial.print(byte6);
      // mySerial.print("  Byte7  "); mySerial.println(byte7);
  
      // mySerial.print("Spare1: "); mySerial.print(spare1);
      // mySerial.print("  Deploy/Stow: "); mySerial.print(deploy_stow);
      // // mySerial.print("  Spare2: "); mySerial.print(spare2);
      // // mySerial.print("  Spare3: "); mySerial.print(spare3);
      // mySerial.print("  Teach: "); mySerial.println(teach);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
      if (teach == 1 && lastButtonState == false) {
        if (replaying) {
          mySerial.println("‚èπ Stopping replay...");
          Status_CAN_JOYSTICK = true;
          replaying = false;
          joystickSequence.clear();  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        } else {
          mySerial.println("üìå Start Recording...");
          // joystickSequence.clear();  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
          recording = true;
        }
        status_stop = 0;
      }

      lastButtonState = (teach == 1);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
      if (recording && teach == 0) {
        mySerial.println("‚úÖ Stop Recording. Start Replaying...");
        recording = false;
        replaying = true;
        Status_CAN_JOYSTICK = true;
        replayIndex = 0;
        lastReplayTime = millis();
        replayStartTime = millis();                                                                      // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
        firstRecordedTime = joystickSequence[0].substring(0, joystickSequence[0].indexOf("|")).toInt();  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      }

    }


      if (CAN_RX_msg.id == JOYSTICK_CAN_ID) {
        unsigned long currentTime2 = millis();
        if (currentTime2 - previousTime2 >= 50) {
          previousTime2 = currentTime2;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          digitalToggle(LED_Status_Can_Joystick);
        }
          uint8_t msb = CAN_RX_msg.buf[0];         //‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤
          uint8_t byte2 = CAN_RX_msg.buf[1];       //‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
          uint8_t byte3 = CAN_RX_msg.buf[2];       //‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á
          uint8_t byte4 = CAN_RX_msg.buf[3];       //‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
          uint8_t byte6 = CAN_RX_msg.buf[5];       //stream/fog
          uint8_t byte7 = CAN_RX_msg.buf[6];       //‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß

        if (deployjoystick && !stowjoystick) {
          Deploy();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Deploy
          processValveMotor(byte7 == 1);
          processJoystick(msb, byte2, byte3, byte4, byte6, byte7);
          enableRemote = false;  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
          deployjoystick = false;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
         
        } else if (!deployjoystick && stowjoystick) {
          Stow();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Stow
          stowjoystick = false;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó
        }

  }


            ///////////////////////////////////////////
    if (CAN_RX_msg.id == SW_JOYSTICK_CAN_ID) {            // ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å joystick 6 ‡∏õ‡∏∏‡πà‡∏°
      uint8_t byteJT0 = CAN_RX_msg.buf[0];  // Teach
      uint8_t byteJT1 = CAN_RX_msg.buf[1];  // On/Off Valve
      uint8_t byteJT2 = CAN_RX_msg.buf[2];  // On/Off Remote
      uint8_t byteJT3 = CAN_RX_msg.buf[3];  // Spare1
      uint8_t byteJT4 = CAN_RX_msg.buf[4];  // Spare2
      uint8_t byteJT5 = CAN_RX_msg.buf[5];  // Deploy/STOW

      if (enableJoystick) {
        if (byteJT5 == 1) {
         deployjoystick = true;  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Deploy

        } else if (byteJT5 == 0) {
        //  stowjoystick = true;  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Stow
         stowjoystick = true;  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Deploy
        }
      }
      // mySerial.println("SW_JOYSTICK_CAN_ID: " + String(byteJT0) + " " + String(byteJT1) + " " + String(byteJT2) + " " + String(byteJT3) + " " + String(byteJT4) + " " + String(byteJT5));


      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
      if (byteJT0 == 1 && lastButtonState == false) {
        if (replaying) {
          mySerial.println("‚èπ Stopping replay...");
          Status_CAN_JOYSTICK = true;
          replaying = false;
          joystickSequence.clear();  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        } else {
          mySerial.println("üìå Start Recording...");
          // joystickSequence.clear();  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
          recording = true;
        }
        status_stop = 0;
      }

      lastButtonState = (byteJT0 == 1);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
      if (recording && byteJT0 == 0) {
        mySerial.println("‚úÖ Stop Recording. Start Replaying...");
        recording = false;
        replaying = true;
        Status_CAN_JOYSTICK = true;
        replayIndex = 0;
        lastReplayTime = millis();
        replayStartTime = millis();                                                                      // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
        firstRecordedTime = joystickSequence[0].substring(0, joystickSequence[0].indexOf("|")).toInt();  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      }
    }

    // **‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å**
    if (replaying && !joystickSequence.empty()) {
      unsigned long currentReplayTime = millis() - replayStartTime;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥
      String command = joystickSequence[replayIndex];

      // ‡∏î‡∏∂‡∏á timestamp ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô
      int delimiterIndex = command.indexOf("|");
      unsigned long recordedTime = command.substring(0, delimiterIndex).toInt();
      recordedTime -= firstRecordedTime;  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0

      // ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
      if (currentReplayTime >= recordedTime) {
        String movement = command.substring(delimiterIndex + 1);  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        mySerial.println("Replaying: " + movement);

        // ‡πÅ‡∏¢‡∏Å PWM
        int pwm1 = movement.substring(movement.indexOf("PWM:") + 5, movement.indexOf(",")).toInt();
        int pwm2 = movement.substring(movement.indexOf(",") + 1).toInt();

        if (movement.indexOf("L") >= 0) {
          mySerial.println("Motor 1 Direction: Left");
          digitalWrite(MOTOR1_DIR_PIN, LOW);
          analogWrite(MOTOR1_PWM_PIN, pwm1);  
          if (indexA > 0) indexA-=1;  // ‡∏•‡∏î index (0-32)
          updateCANIndicator();
        } else if (movement.indexOf("R") >= 0) {
          mySerial.println("Motor 1 Direction: Right");
          digitalWrite(MOTOR1_DIR_PIN, HIGH);
          analogWrite(MOTOR1_PWM_PIN, pwm1);  
          if (indexA < MAX_INDEX_A) indexA+=1;  // ‡πÄ‡∏û‡∏¥‡πà‡∏° index (0-32)
          updateCANIndicator();

        } else if (movement.indexOf("U") >= 0) {
          mySerial.println("Motor 2 Direction: Up");
          digitalWrite(MOTOR2_DIR_PIN, HIGH);
          analogWrite(MOTOR2_PWM_PIN, pwm2);  
          if (indexB < MAX_INDEX_B) indexB+=1;  // ‡πÄ‡∏û‡∏¥‡πà‡∏° index (0-24)
          updateCANIndicator();
        } else if (movement.indexOf("D") >= 0) {
          mySerial.println("Motor 2 Direction: Down");
          digitalWrite(MOTOR2_DIR_PIN, LOW);
          analogWrite(MOTOR2_PWM_PIN, pwm2);  
          if (indexB > 0) indexB-=1;  // ‡∏•‡∏î index (0-24)
          updateCANIndicator();
        } else {
          stopMotors();
        }
        

        replayIndex++;
        if (replayIndex >= joystickSequence.size()) {
          replayIndex = 0;             // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô
          replayStartTime = millis();  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏ô
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    if ((millis() - lastMovementTime > idleTime) && status_stop == 0) {
      stopMotors();  // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
      status_stop = 1;
    }
/////////////////////////////////teach////////////////////////////////////////






    if(Status_CAN_JOYSTICK && replaying){                             //  CAN Tansmitter  JOYSTICK callback
      CAN_TX_msg.id = (0x122);
      CAN_TX_msg.len = 8;
      CAN_TX_msg.buf[0] =  1;   // Teach led
      CAN_TX_msg.buf[1] =  0;   // On/Off Valve led
      CAN_TX_msg.buf[2] =  0;   // On/Off Remote led
      CAN_TX_msg.buf[3] =  0;   // Spare1 led
      CAN_TX_msg.buf[4] =  0;   // Spare2 led
      CAN_TX_msg.buf[5] =  0;   // Deploy/STOW led
      Can.write(CAN_TX_msg);
      Status_CAN_JOYSTICK = false;
    }else if(Status_CAN_JOYSTICK && !replaying){                             //  CAN Tansmitter  JOYSTICK callback
      CAN_TX_msg.id = (0x122);
      CAN_TX_msg.len = 8;
      CAN_TX_msg.buf[0] =  0;   // Teach led
      CAN_TX_msg.buf[1] =  0;   // On/Off Valve led
      CAN_TX_msg.buf[2] =  0;   // On/Off Remote led
      CAN_TX_msg.buf[3] =  0;   // Spare1 led
      CAN_TX_msg.buf[4] =  0;   // Spare2 led
      CAN_TX_msg.buf[5] =  0;   // Deploy/STOW led
      Can.write(CAN_TX_msg);
      Status_CAN_JOYSTICK = false;
    }


    if (CAN_RX_msg.id == INDICATOR_CAN_ID) {              //  CAN Recevier INDICATOR 
      unsigned long currentTime2 = millis();
      if (currentTime2 - previousTime2 >= 50) {
        previousTime2 = currentTime2;  //  biuk
        digitalToggle(LED_Status_Can_Indicator);
      }
    }
    if(Status_CAN_INDICATOR){                             //  CAN Tansmitter  INDICATOR callback
      CAN_TX_msg.id = (0x069);
      CAN_TX_msg.len = 8;
      CAN_TX_msg.buf[0] =  0;   // index gruopA 32 led
      CAN_TX_msg.buf[1] =  0;   // index gruopB 24 led
      Can.write(CAN_TX_msg);
    }

  }

  delay(5);

}


